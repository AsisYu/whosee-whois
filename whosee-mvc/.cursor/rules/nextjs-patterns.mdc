---
description: Next.js 15 App Router patterns and conventions
globs: src/**/*.tsx,src/**/*.ts
alwaysApply: false
---

# Next.js Patterns for Whosee WHOIS

## App Router Structure

### Page Organization
Follow the App Router pattern established in [src/app/](mdc:src/app):

```typescript
// Page component pattern
export default function PageName() {
  return (
    <main className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">{t('title')}</h1>
      {/* Page content */}
    </main>
  );
}

// Metadata export
export const metadata = {
  title: 'Page Title',
  description: 'Page description'
};
```

### Route Structure
- **Feature pages**: `/domain`, `/dns`, `/health`, `/screenshot`
- **Internationalized routes**: `/en/[feature]` (handled by middleware)
- **Debug/utility pages**: `/debug`, `/test-locale`

### Layout Patterns

#### Root Layout ([src/app/layout.tsx](mdc:src/app/layout.tsx))
Always include these providers:
- `ThemeProvider` for dark/light mode
- `NextIntlClientProvider` for internationalization
- Proper metadata with i18n support

```typescript
export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang={locale} suppressHydrationWarning>
      <body className={cn("min-h-screen bg-background font-sans antialiased", fontSans.variable)}>
        <ThemeProvider>
          <NextIntlClientProvider>
            <Navbar />
            {children}
            <Footer />
          </NextIntlClientProvider>
        </ThemeProvider>
      </body>
    </html>
  );
}
```

## Internationalization Patterns

### Translation Usage
Use the established pattern from [src/i18n/](mdc:src/i18n):

```typescript
import { useTranslations } from 'next-intl';

function Component() {
  const t = useTranslations('namespace');
  
  return (
    <div>
      <h1>{t('title')}</h1>
      <p>{t('description')}</p>
    </div>
  );
}
```

### Translation Files
- **English**: [src/messages/en.json](mdc:src/messages/en.json)
- **Chinese**: [src/messages/zh.json](mdc:src/messages/zh.json)

Structure translations by feature:
```json
{
  "domain": {
    "title": "Domain Lookup",
    "placeholder": "Enter domain name",
    "submit": "Search"
  },
  "dns": {
    "title": "DNS Records",
    "types": {
      "A": "A Record",
      "AAAA": "AAAA Record"
    }
  }
}
```

### Middleware Pattern
Follow [src/middleware.ts](mdc:src/middleware.ts) for locale handling:
- Automatic locale detection
- URL rewriting for locale prefixes
- Cookie-based locale persistence

## Page Component Patterns

### Feature Page Structure
Model after existing pages like [src/app/domain/page.tsx](mdc:src/app/domain/page.tsx):

```typescript
'use client';

import { useState } from 'react';
import { useTranslations } from 'next-intl';
import { SearchBox } from '@/components/ui/search-box';
import { LoadingSpinner } from '@/components/ui/loading';

export default function FeaturePage() {
  const t = useTranslations('feature');
  const [loading, setLoading] = useState(false);
  const [data, setData] = useState(null);

  const handleSearch = async (query: string) => {
    setLoading(true);
    try {
      // API call logic
    } finally {
      setLoading(false);
    }
  };

  return (
    <main className="container mx-auto px-4 py-8">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-6">{t('title')}</h1>
        
        <SearchBox
          onSearch={handleSearch}
          placeholder={t('placeholder')}
          disabled={loading}
        />

        {loading && <LoadingSpinner />}
        
        {data && (
          <div className="mt-8">
            {/* Results display */}
          </div>
        )}
      </div>
    </main>
  );
}
```

## API Integration Patterns

### Client-side API Calls
Use the established API client from [src/lib/api.ts](mdc:src/lib/api.ts):

```typescript
import { api } from '@/lib/api';
import type { WHOISResponse, DNSResponse } from '@/types';

// Standard API call pattern
const fetchDomainData = async (domain: string): Promise<WHOISResponse> => {
  try {
    const response = await api.whois.lookup(domain);
    return response.data;
  } catch (error) {
    console.error('API Error:', error);
    throw error;
  }
};

// With loading state
const [loading, setLoading] = useState(false);
const [error, setError] = useState<string | null>(null);

const handleAPICall = async () => {
  setLoading(true);
  setError(null);
  
  try {
    const result = await api.endpoint.method(params);
    // Handle success
  } catch (err) {
    setError(err instanceof Error ? err.message : 'Unknown error');
  } finally {
    setLoading(false);
  }
};
```

## State Management

### Component State Pattern
Use React hooks consistently:

```typescript
// Form state
const [formData, setFormData] = useState({
  domain: '',
  options: {}
});

// API state
const [data, setData] = useState<ResponseType | null>(null);
const [loading, setLoading] = useState(false);
const [error, setError] = useState<string | null>(null);

// UI state
const [isOpen, setIsOpen] = useState(false);
const [activeTab, setActiveTab] = useState('overview');
```

## Error Handling

### Error Boundary Pattern
Implement error boundaries for robust error handling:

```typescript
'use client';

import { ErrorBoundary } from 'react-error-boundary';

function ErrorFallback({error}: {error: Error}) {
  return (
    <div className="error-container">
      <h2>Something went wrong:</h2>
      <pre>{error.message}</pre>
    </div>
  );
}

export default function Page() {
  return (
    <ErrorBoundary FallbackComponent={ErrorFallback}>
      <PageContent />
    </ErrorBoundary>
  );
}
```

## Performance Patterns

### Dynamic Imports
Use dynamic imports for heavy components:

```typescript
import dynamic from 'next/dynamic';

const HeavyComponent = dynamic(() => import('@/components/heavy-component'), {
  loading: () => <LoadingSpinner />,
  ssr: false
});
```

### Memoization
Memoize expensive calculations:

```typescript
import { useMemo, useCallback } from 'react';

const expensiveValue = useMemo(() => {
  return processLargeData(data);
}, [data]);

const handleClick = useCallback((id: string) => {
  // Handle click
}, [dependency]);
```

## Server Components vs Client Components

### Server Components (Default)
Use for:
- Static content
- Data fetching at build/request time
- SEO-critical content

### Client Components ('use client')
Use for:
- Interactive features
- Browser APIs
- State management
- Event handlers

Follow the pattern established in existing pages:
- Layout components: Server components
- Feature pages: Client components (for interactivity)
- UI components: Client components (for state)
