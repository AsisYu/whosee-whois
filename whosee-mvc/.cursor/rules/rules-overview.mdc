---
description: Overview of all Cursor rules for whosee-whois project
globs: *
alwaysApply: true
---

# Whosee WHOIS Cursor Rules Overview

This document provides an overview of all Cursor rules configured for the whosee-whois project. These rules help maintain consistency, provide guidance on patterns, and ensure best practices.

## Available Rules

### 1. Project Guide ([project-guide.mdc](mdc:.cursor/rules/project-guide.mdc))
**Always Applied**: No | **Description**: Comprehensive project overview
- Project architecture and structure
- Key file references and their purposes
- Development environment setup
- Feature page descriptions
- API integration patterns

### 2. API Patterns ([api-patterns.mdc](mdc:.cursor/rules/api-patterns.mdc))
**Always Applied**: No | **Description**: Go backend API patterns
- Handler structure and patterns
- Middleware chain organization
- Service layer patterns
- Provider integration patterns
- Error handling conventions
- Testing patterns for backend

### 3. Next.js Patterns ([nextjs-patterns.mdc](mdc:.cursor/rules/nextjs-patterns.mdc))
**Always Applied**: No | **Globs**: `*.tsx,*.ts`
- App Router structure and conventions
- Internationalization patterns
- Page component patterns
- API integration from frontend
- Performance optimization techniques
- Server vs Client component usage

### 4. Component Patterns ([component-patterns.mdc](mdc:.cursor/rules/component-patterns.mdc))
**Always Applied**: No | **Globs**: `*.tsx,*.ts`
- shadcn/ui component patterns
- React component conventions
- TypeScript patterns for components
- Loading and error state handling
- Form component patterns
- Layout and container patterns

### 5. Development Workflow ([development-workflow.mdc](mdc:.cursor/rules/development-workflow.mdc))
**Always Applied**: No | **Globs**: `*`
- Project setup and environment configuration
- Development commands and scripts
- Code standards and conventions
- Testing patterns for both frontend and backend
- Deployment workflows
- Git workflow and commit conventions

### 6. Styling Patterns ([styling-patterns.mdc](mdc:.cursor/rules/styling-patterns.mdc))
**Always Applied**: No | **Globs**: `*.tsx,*.ts,*.css`
- Tailwind CSS configuration and conventions
- Design system and color palette
- Component styling patterns
- Responsive design patterns
- Dark mode implementation
- Animation and transition patterns

### 7. Internationalization Patterns ([i18n-patterns.mdc](mdc:.cursor/rules/i18n-patterns.mdc))
**Always Applied**: No | **Globs**: `*.tsx,*.ts,*.json`
- next-intl configuration and setup
- Translation file organization
- Component internationalization patterns
- Locale management and routing
- Form validation with i18n
- Testing internationalized components

### 8. Type Patterns ([type-patterns.mdc](mdc:.cursor/rules/type-patterns.mdc))
**Always Applied**: No | **Globs**: `*.ts,*.tsx`
- Core API type definitions
- Component prop type patterns
- Hook type patterns
- Utility type definitions
- Type guards and validators
- Advanced TypeScript patterns

### 9. MVC Patterns ([mvc-patterns.mdc](mdc:.cursor/rules/mvc-patterns.mdc))
**Always Applied**: Yes | **Globs**: `*.ts,*.tsx`
- MVC 架构模式指导
- Model 层数据模型和状态管理
- Controller 层业务逻辑控制
- View 层用户界面组件
- 最佳实践和性能优化
- 测试策略和代码组织

## Rule Categories

### Architecture & Structure
- [project-guide.mdc](mdc:.cursor/rules/project-guide.mdc) - Overall project structure
- [mvc-patterns.mdc](mdc:.cursor/rules/mvc-patterns.mdc) - MVC 架构模式指导
- [development-workflow.mdc](mdc:.cursor/rules/development-workflow.mdc) - Development processes

### Frontend Development
- [nextjs-patterns.mdc](mdc:.cursor/rules/nextjs-patterns.mdc) - Next.js specific patterns
- [component-patterns.mdc](mdc:.cursor/rules/component-patterns.mdc) - React component patterns
- [styling-patterns.mdc](mdc:.cursor/rules/styling-patterns.mdc) - CSS and design patterns

### Backend Development
- [api-patterns.mdc](mdc:.cursor/rules/api-patterns.mdc) - Go backend patterns

### Cross-cutting Concerns
- [i18n-patterns.mdc](mdc:.cursor/rules/i18n-patterns.mdc) - Internationalization
- [type-patterns.mdc](mdc:.cursor/rules/type-patterns.mdc) - TypeScript types

## Quick Reference

### Key Technologies
- **Frontend**: Next.js 15, React 19, TypeScript, Tailwind CSS, shadcn/ui
- **Backend**: Go, custom HTTP server, Redis, Docker/Kubernetes
- **Internationalization**: next-intl (English, Chinese)
- **Styling**: Tailwind CSS with design tokens, dark/light mode
- **Deployment**: Docker containers, Kubernetes, Vercel

### Project Structure Quick Links
- **Frontend Pages**: [src/app/](mdc:src/app) - Next.js App Router pages
- **Components**: [src/components/ui/](mdc:src/components/ui) - Reusable UI components
- **API Client**: [src/lib/api.ts](mdc:src/lib/api.ts) - Frontend API communication
- **Types**: [src/types/index.ts](mdc:src/types/index.ts) - TypeScript definitions
- **Backend Handlers**: [server/handlers/](mdc:server/handlers) - API endpoints
- **Backend Services**: [server/services/](mdc:server/services) - Business logic

### Core Features
1. **Domain WHOIS Lookup** - [src/app/domain/page.tsx](mdc:src/app/domain/page.tsx)
2. **DNS Records** - [src/app/dns/page.tsx](mdc:src/app/dns/page.tsx)
3. **Health Monitoring** - [src/app/health/page.tsx](mdc:src/app/health/page.tsx)
4. **Website Screenshots** - [src/app/screenshot/page.tsx](mdc:src/app/screenshot/page.tsx)

### Development Commands
```bash
# Frontend
npm run dev          # Development server
npm run build        # Production build
npm run lint         # Code linting

# Backend
cd server
go run main.go       # Development server
go test ./...        # Run tests
```

## Usage Guidelines

### When to Use Each Rule
1. **Starting new features**: Reference `project-guide.mdc`, `mvc-patterns.mdc` and `nextjs-patterns.mdc`
2. **Creating components**: Use `mvc-patterns.mdc`, `component-patterns.mdc` and `styling-patterns.mdc`
3. **Backend development**: Follow `api-patterns.mdc`
4. **Adding translations**: Refer to `i18n-patterns.mdc`
5. **Type definitions**: Use `type-patterns.mdc`
6. **Setting up development**: Follow `development-workflow.mdc`
7. **Architecture design**: Follow `mvc-patterns.mdc` for proper separation of concerns

### Best Practices
- Always follow the established patterns for consistency
- Use TypeScript strictly with proper type definitions
- Implement internationalization for all user-facing text
- Follow the component composition patterns from shadcn/ui
- Use semantic Tailwind classes and design tokens
- Test both frontend components and backend handlers
- Follow Git conventions for commits and branching

## Updating Rules

These rules should be updated when:
- New architectural decisions are made
- New patterns emerge in the codebase
- Technology stack changes
- Best practices evolve

To update a rule, edit the corresponding `.mdc` file in the `.cursor/rules` directory.
