---
description:
globs:
alwaysApply: false
---
# 开发工作流程和最佳实践

## 项目启动流程

### 环境设置

```bash
# 1. 安装依赖
npm install

# 2. 创建环境变量文件
cp .env.example .env.local

# 3. 启动开发服务器（使用 Turbopack）
npm run dev

# 4. 在浏览器中打开 http://localhost:3000
```

### 开发环境配置

```bash
# .env.local 示例配置
NEXT_PUBLIC_API_URL=http://localhost:3001
NEXT_PUBLIC_ENABLE_SCREENSHOT=true
NEXT_PUBLIC_ENABLE_DNS=true
NEXT_PUBLIC_DEBUG_MODE=true

# 如果需要外部 API
API_SECRET=your-secret-key
WHOIS_API_KEY=your-whois-api-key
```

## 代码组织和文件结构

### 新页面创建流程

```typescript
// 1. 在 app/ 目录下创建新页面
// app/new-feature/page.tsx
export default function NewFeaturePage() {
  return (
    <div>
      <h1>New Feature</h1>
    </div>
  );
}

// 2. 如需布局，创建 layout.tsx
// app/new-feature/layout.tsx
export default function NewFeatureLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <div className="new-feature-layout">
      {children}
    </div>
  );
}

// 3. 添加加载状态
// app/new-feature/loading.tsx
export default function Loading() {
  return <div>Loading new feature...</div>;
}

// 4. 添加错误处理
// app/new-feature/error.tsx
'use client';
export default function Error({
  error,
  reset,
}: {
  error: Error;
  reset: () => void;
}) {
  return (
    <div>
      <h2>Something went wrong!</h2>
      <button onClick={() => reset()}>Try again</button>
    </div>
  );
}
```

### 组件创建流程

```typescript
// 1. 在 src/components/ui/ 下创建新组件
// src/components/ui/new-component.tsx

interface NewComponentProps {
  title: string;
  description?: string;
  variant?: 'primary' | 'secondary';
  className?: string;
}

export function NewComponent({
  title,
  description,
  variant = 'primary',
  className,
}: NewComponentProps) {
  return (
    <div className={cn('component-base-styles', className)}>
      <h3>{title}</h3>
      {description && <p>{description}</p>}
    </div>
  );
}

// 2. 在 src/components/ui/index.ts 中导出（如果需要）
export { NewComponent } from './new-component';

// 3. 在页面中使用
import { NewComponent } from '@/components/ui/new-component';
```

## Git 工作流程

### 分支管理

```bash
# 1. 从主分支创建功能分支
git checkout main
git pull origin main
git checkout -b feature/whois-query-enhancement

# 2. 开发过程中定期提交
git add .
git commit -m "feat: add advanced whois query options"

# 3. 推送到远程分支
git push origin feature/whois-query-enhancement

# 4. 创建 Pull Request
# 通过 GitHub/GitLab Web 界面创建 PR

# 5. 合并后清理分支
git checkout main
git pull origin main
git branch -d feature/whois-query-enhancement
```

### 提交信息规范

```bash
# 功能添加
git commit -m "feat: add DNS record type filtering"

# 问题修复
git commit -m "fix: resolve WHOIS query timeout issue"

# 文档更新
git commit -m "docs: update API usage examples"

# 样式改进
git commit -m "style: improve mobile responsive design"

# 重构代码
git commit -m "refactor: extract common API logic"

# 性能优化
git commit -m "perf: optimize domain search performance"

# 测试相关
git commit -m "test: add unit tests for DNS service"

# 构建相关
git commit -m "build: update Next.js to v15"
```

## 开发调试流程

### 开发服务器调试

```typescript
// 在组件中添加调试信息
'use client';

import { useEffect } from 'react';

export function DebugComponent() {
  useEffect(() => {
    if (process.env.NODE_ENV === 'development') {
      console.log('Debug: Component mounted');
    }
  }, []);

  return <div>Component content</div>;
}

// 使用环境变量控制调试
if (process.env.NEXT_PUBLIC_DEBUG_MODE === 'true') {
  console.log('Debug mode enabled');
}
```

### API 调试

```typescript
// src/lib/api.ts
export async function debugApiCall(endpoint: string, data?: any) {
  if (process.env.NODE_ENV === 'development') {
    console.log('API Call:', endpoint, data);
  }

  const response = await fetch(endpoint, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(data),
  });

  const result = await response.json();

  if (process.env.NODE_ENV === 'development') {
    console.log('API Response:', result);
  }

  return result;
}
```

### 错误追踪

```typescript
// src/lib/error-tracking.ts
export function logError(error: Error, context?: string) {
  console.error(`Error ${context ? `in ${context}` : ''}:`, error);

  // 在生产环境中发送到错误追踪服务
  if (process.env.NODE_ENV === 'production') {
    // sendToErrorTracking(error, context);
  }
}

// 在组件中使用
try {
  await apiCall();
} catch (error) {
  logError(error as Error, 'WhoisQuery');
}
```

## 测试流程

### 组件测试

```typescript
// __tests__/components/SearchBox.test.tsx
import { render, screen, fireEvent } from '@testing-library/react';
import { SearchBox } from '@/components/ui/search-box';

describe('SearchBox', () => {
  it('should render search input', () => {
    render(<SearchBox onSearch={jest.fn()} />);
    
    const input = screen.getByPlaceholderText(/输入域名/i);
    expect(input).toBeInTheDocument();
  });

  it('should call onSearch when form is submitted', () => {
    const mockOnSearch = jest.fn();
    render(<SearchBox onSearch={mockOnSearch} />);

    const input = screen.getByPlaceholderText(/输入域名/i);
    fireEvent.change(input, { target: { value: 'example.com' } });
    fireEvent.submit(input);

    expect(mockOnSearch).toHaveBeenCalledWith('example.com');
  });
});
```

### API 测试

```typescript
// __tests__/api/whois.test.ts
import { POST } from '@/app/api/whois/route';
import { NextRequest } from 'next/server';

describe('/api/whois', () => {
  it('should return whois data for valid domain', async () => {
    const request = new NextRequest('http://localhost/api/whois', {
      method: 'POST',
      body: JSON.stringify({ domain: 'example.com' }),
    });

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(200);
    expect(data.success).toBe(true);
    expect(data.data).toBeDefined();
  });

  it('should return error for invalid domain', async () => {
    const request = new NextRequest('http://localhost/api/whois', {
      method: 'POST',
      body: JSON.stringify({ domain: 'invalid-domain' }),
    });

    const response = await POST(request);
    const data = await response.json();

    expect(response.status).toBe(400);
    expect(data.success).toBe(false);
  });
});
```

## 构建和部署流程

### 本地构建测试

```bash
# 1. 构建生产版本
npm run build

# 2. 启动生产服务器进行测试
npm run start

# 3. 检查构建输出
ls -la .next/static/

# 4. 分析包大小（如果配置了）
npm run analyze
```

### 部署前检查清单

```bash
# 1. 代码质量检查
npm run lint
npm run type-check

# 2. 测试运行
npm run test

# 3. 构建测试
npm run build

# 4. 环境变量检查
# 确保所有必要的环境变量已设置

# 5. 性能检查
# 使用 Lighthouse 或其他工具测试性能

# 6. 安全检查
npm audit
```

### Vercel 部署

```bash
# 1. 安装 Vercel CLI（如果需要）
npm i -g vercel

# 2. 链接项目到 Vercel
vercel link

# 3. 设置环境变量
vercel env add NEXT_PUBLIC_API_URL

# 4. 部署预览版本
vercel

# 5. 部署到生产环境
vercel --prod
```

## 性能优化流程

### 图片优化

```typescript
// 使用 Next.js Image 组件
import Image from 'next/image';

export function OptimizedImage() {
  return (
    <Image
      src="/hero-image.jpg"
      alt="Hero Image"
      width={800}
      height={400}
      priority // 对于首屏图片
      placeholder="blur" // 添加模糊占位符
    />
  );
}
```

### 代码分割

```typescript
// 动态导入组件
import dynamic from 'next/dynamic';

const HeavyComponent = dynamic(
  () => import('@/components/HeavyComponent'),
  {
    loading: () => <p>Loading...</p>,
    ssr: false, // 如果不需要服务端渲染
  }
);
```

### 字体优化

```typescript
// app/layout.tsx
import { Inter } from 'next/font/google';

const inter = Inter({
  subsets: ['latin'],
  display: 'swap',
});

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="zh" className={inter.className}>
      <body>{children}</body>
    </html>
  );
}
```
