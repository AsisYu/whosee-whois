---
description: 
globs: 
alwaysApply: false
---
# Whosee-Whois Next.js 项目开发指南

## 项目概述

Whosee-Whois 是一个优雅的域名查询工具，基于 Next.js 15 和 TypeScript 构建，提供 WHOIS 信息查询、DNS 记录查询和网站截图功能。这是一个现代化的全栈 Web 应用，支持国际化和主题切换。

## 核心技术栈

- **前端框架**: Next.js 15 + React 19
- **语言**: TypeScript
- **样式**: TailwindCSS 3.4
- **国际化**: next-intl
- **主题系统**: next-themes
- **动画**: Framer Motion
- **图标**: Lucide React
- **工具库**: class-variance-authority, clsx, tailwind-merge
- **构建工具**: Turbopack (dev mode)

## 项目架构

### 目录结构

主要的源代码位于 `src/` 目录：

```
src/
├── app/                    # Next.js App Router
│   ├── dns/               # DNS 查询页面
│   ├── domain/            # 域名查询页面  
│   ├── health/            # 健康检查页面
│   ├── screenshot/        # 截图功能页面
│   ├── layout.tsx         # 根布局组件
│   ├── page.tsx           # 首页
│   └── globals.css        # 全局样式
├── components/            # 可复用组件
│   ├── providers/         # 全局状态提供者
│   │   └── theme-provider.tsx
│   └── ui/               # UI 组件库
│       ├── badge.tsx
│       ├── copy-button.tsx
│       ├── data-table.tsx
│       ├── error-state.tsx
│       ├── language-toggle.tsx
│       ├── loading.tsx
│       ├── navbar.tsx
│       ├── search-box.tsx
│       └── theme-toggle.tsx
├── i18n/                 # 国际化配置
│   ├── config.ts         # 语言配置
│   └── request.ts        # 请求处理
├── lib/                  # 工具库
│   ├── api.ts           # API 请求封装
│   └── utils.ts         # 通用工具函数
├── messages/             # 国际化消息
│   ├── en.json          # 英文翻译
│   └── zh.json          # 中文翻译
└── types/               # TypeScript 类型定义
    └── index.ts
```

### 关键文件

- **根布局**: [src/app/layout.tsx](mdc:src/app/layout.tsx) - 应用主布局，包含导航栏和主题提供者
- **首页**: [src/app/page.tsx](mdc:src/app/page.tsx) - 应用主入口，包含搜索框和功能展示
- **全局样式**: [src/app/globals.css](mdc:src/app/globals.css) - TailwindCSS 配置和自定义样式
- **国际化配置**: [src/i18n/config.ts](mdc:src/i18n/config.ts) - 支持中文和英文
- **API 层**: [src/lib/api.ts](mdc:src/lib/api.ts) - 统一的 API 请求处理
- **工具函数**: [src/lib/utils.ts](mdc:src/lib/utils.ts) - 通用工具函数，包含 cn() 函数
- **类型定义**: [src/types/index.ts](mdc:src/types/index.ts) - 全局类型定义

## 开发模式和约定

### Next.js App Router 模式

1. **页面路由**: 使用 App Router，页面组件放在 `app/` 目录
2. **布局系统**: 使用嵌套布局，根布局包含导航栏和主题提供者
3. **服务端组件**: 默认使用服务端组件，需要客户端交互时使用 `'use client'`
4. **API 路由**: 如需要，可在 `app/api/` 目录下创建 API 路由

### 组件组织模式

```typescript
// 组件文件结构示例
export interface ComponentProps {
  // 类型定义
}

export function Component({ ...props }: ComponentProps) {
  // 组件实现
}
```

### 国际化模式

```typescript
// 使用 next-intl 进行国际化
import { useTranslations } from 'next-intl';

export default function Page() {
  const t = useTranslations('namespace');
  return <h1>{t('title')}</h1>;
}
```

### 样式组织

1. **TailwindCSS**: 主要使用 Tailwind 原子类
2. **CSS Variables**: 在 `globals.css` 中定义主题色彩变量
3. **组件样式**: 使用 `cn()` 函数合并 className
4. **暗色主题**: 使用 next-themes 支持主题切换

## API 集成指南

### API 调用模式

使用 `src/lib/api.ts` 中的统一封装：

```typescript
// API 调用示例
import { apiRequest } from '@/lib/api';

const whoisData = await apiRequest('/whois', {
  domain: 'example.com'
});
```

### 错误处理

```typescript
try {
  const data = await apiRequest('/endpoint');
  // 处理成功响应
} catch (error) {
  // 统一错误处理
  console.error('API Error:', error);
}
```

## 环境配置

主要环境变量（在 `.env.local` 文件中配置）：

```bash
# API 服务配置
NEXT_PUBLIC_API_URL=http://localhost:3001
API_SECRET=your-api-secret

# 功能开关
NEXT_PUBLIC_ENABLE_SCREENSHOT=true
NEXT_PUBLIC_ENABLE_DNS=true
```

## 开发命令

```bash
npm run dev          # 启动开发服务器 (使用 Turbopack)
npm run build        # 构建生产版本
npm run start        # 启动生产服务器
npm run lint         # ESLint 代码检查
```

## 代码风格约定

1. **TypeScript**: 所有文件使用 TypeScript，严格模式
2. **组件定义**: 使用函数组件和 TypeScript 接口
3. **文件命名**: 使用 kebab-case，组件文件使用 PascalCase
4. **导入顺序**: 
   - React 相关
   - 第三方库
   - 内部组件
   - 类型定义
5. **中文注释**: 重要功能和复杂逻辑使用中文注释

## 部署配置

项目配置支持多种部署方式：
- **Vercel**: 推荐部署平台，支持自动部署
- **其他平台**: 支持 Docker 和传统服务器部署
- 配置文件: [next.config.ts](mdc:next.config.ts) - Next.js 配置
- 包管理: [package.json](mdc:package.json) - 依赖和脚本

## 性能优化

1. **代码分割**: 使用动态导入和懒加载
2. **图片优化**: 使用 Next.js Image 组件
3. **字体优化**: 使用 Next.js Font 优化
4. **缓存策略**: 合理设置缓存头和 ISR





