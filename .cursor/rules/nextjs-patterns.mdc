---
description:
globs:
alwaysApply: false
---
# Next.js 开发模式和最佳实践

## App Router 模式

### 文件系统路由

```typescript
// app/domain/page.tsx - 域名查询页面
export default function DomainPage() {
  return <div>Domain Query Page</div>;
}

// app/domain/loading.tsx - 加载状态
export default function Loading() {
  return <div>Loading...</div>;
}

// app/domain/error.tsx - 错误处理
'use client';
export default function Error({
  error,
  reset,
}: {
  error: Error;
  reset: () => void;
}) {
  return <div>Something went wrong!</div>;
}
```

### 布局组件模式

```typescript
// app/layout.tsx - 根布局
import { ThemeProvider } from '@/components/providers/theme-provider';
import { Navbar } from '@/components/ui/navbar';

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="zh">
      <body>
        <ThemeProvider>
          <Navbar />
          <main>{children}</main>
        </ThemeProvider>
      </body>
    </html>
  );
}
```

## 组件开发模式

### 客户端组件

```typescript
'use client';

import { useState } from 'react';
import { useTranslations } from 'next-intl';

interface SearchBoxProps {
  onSearch: (query: string) => void;
  loading?: boolean;
}

export function SearchBox({ onSearch, loading }: SearchBoxProps) {
  const [query, setQuery] = useState('');
  const t = useTranslations('search');
  
  return (
    <div className="relative">
      <input
        value={query}
        onChange={(e) => setQuery(e.target.value)}
        placeholder={t('placeholder')}
        className="w-full px-4 py-2 border rounded-lg"
      />
      <button
        onClick={() => onSearch(query)}
        disabled={loading}
        className="absolute right-2 top-2"
      >
        {loading ? t('searching') : t('search')}
      </button>
    </div>
  );
}
```

### 服务端组件

```typescript
// 默认为服务端组件，可以直接进行数据获取
async function getData() {
  const res = await fetch('https://api.example.com/data');
  return res.json();
}

export default async function Page() {
  const data = await getData();
  
  return (
    <div>
      <h1>Server Component</h1>
      <pre>{JSON.stringify(data, null, 2)}</pre>
    </div>
  );
}
```

## 国际化模式

### 消息文件结构

```json
// src/messages/zh.json
{
  "home": {
    "title": "域名查询工具",
    "subtitle": "专业的 WHOIS 查询服务"
  },
  "search": {
    "placeholder": "输入域名进行查询",
    "button": "查询"
  }
}
```

### 使用翻译

```typescript
import { useTranslations } from 'next-intl';

export function Component() {
  const t = useTranslations('home');
  
  return (
    <div>
      <h1>{t('title')}</h1>
      <p>{t('subtitle')}</p>
    </div>
  );
}
```

## 状态管理模式

### 本地状态

```typescript
'use client';

import { useState, useEffect } from 'react';

export function useApiData<T>(url: string) {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    async function fetchData() {
      try {
        setLoading(true);
        const response = await fetch(url);
        const result = await response.json();
        setData(result);
      } catch (err) {
        setError(err instanceof Error ? err.message : 'Unknown error');
      } finally {
        setLoading(false);
      }
    }

    fetchData();
  }, [url]);

  return { data, loading, error };
}
```

### 全局状态 (Context)

```typescript
'use client';

import { createContext, useContext, ReactNode } from 'react';

interface AppContextType {
  // 定义全局状态类型
}

const AppContext = createContext<AppContextType | undefined>(undefined);

export function AppProvider({ children }: { children: ReactNode }) {
  // 状态逻辑
  
  return (
    <AppContext.Provider value={value}>
      {children}
    </AppContext.Provider>
  );
}

export function useApp() {
  const context = useContext(AppContext);
  if (!context) {
    throw new Error('useApp must be used within AppProvider');
  }
  return context;
}
```

## 样式和 UI 模式

### TailwindCSS 使用

```typescript
import { cn } from '@/lib/utils';

interface ButtonProps {
  variant?: 'primary' | 'secondary';
  size?: 'sm' | 'md' | 'lg';
  className?: string;
}

export function Button({ variant = 'primary', size = 'md', className, ...props }: ButtonProps) {
  return (
    <button
      className={cn(
        'rounded-lg font-medium transition-colors',
        {
          'bg-blue-600 text-white hover:bg-blue-700': variant === 'primary',
          'bg-gray-200 text-gray-900 hover:bg-gray-300': variant === 'secondary',
        },
        {
          'px-3 py-1.5 text-sm': size === 'sm',
          'px-4 py-2': size === 'md',
          'px-6 py-3 text-lg': size === 'lg',
        },
        className
      )}
      {...props}
    />
  );
}
```

### 主题切换

```typescript
'use client';

import { useTheme } from 'next-themes';
import { Moon, Sun } from 'lucide-react';

export function ThemeToggle() {
  const { theme, setTheme } = useTheme();

  return (
    <button
      onClick={() => setTheme(theme === 'dark' ? 'light' : 'dark')}
      className="p-2 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-800"
    >
      <Sun className="h-5 w-5 rotate-0 scale-100 transition-all dark:-rotate-90 dark:scale-0" />
      <Moon className="absolute h-5 w-5 rotate-90 scale-0 transition-all dark:rotate-0 dark:scale-100" />
    </button>
  );
}
```

## 数据获取模式

### API 路由

```typescript
// app/api/whois/route.ts
import { NextRequest, NextResponse } from 'next/server';

export async function POST(request: NextRequest) {
  try {
    const { domain } = await request.json();
    
    // 业务逻辑
    const whoisData = await fetchWhoisData(domain);
    
    return NextResponse.json({ data: whoisData });
  } catch (error) {
    return NextResponse.json(
      { error: 'Failed to fetch WHOIS data' },
      { status: 500 }
    );
  }
}
```

### 客户端请求

```typescript
'use client';

import { useState } from 'react';

export function useWhoisQuery() {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(false);

  const queryWhois = async (domain: string) => {
    setLoading(true);
    try {
      const response = await fetch('/api/whois', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ domain }),
      });
      const result = await response.json();
      setData(result.data);
    } catch (error) {
      console.error('WHOIS query failed:', error);
    } finally {
      setLoading(false);
    }
  };

  return { data, loading, queryWhois };
}
```
