---
description:
globs:
alwaysApply: false
---
# API 开发模式和最佳实践

## API 路由模式

### 基础 API 路由结构

```typescript
// app/api/whois/route.ts
import { NextRequest, NextResponse } from 'next/server';

export async function GET(request: NextRequest) {
  const searchParams = request.nextUrl.searchParams;
  const domain = searchParams.get('domain');

  if (!domain) {
    return NextResponse.json(
      { error: 'Domain parameter is required' },
      { status: 400 }
    );
  }

  try {
    const whoisData = await fetchWhoisData(domain);
    return NextResponse.json({ 
      success: true,
      data: whoisData 
    });
  } catch (error) {
    return NextResponse.json(
      { 
        success: false,
        error: 'Failed to fetch WHOIS data',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}

export async function POST(request: NextRequest) {
  try {
    const body = await request.json();
    const { domain, options } = body;

    // 验证请求数据
    if (!domain || typeof domain !== 'string') {
      return NextResponse.json(
        { error: 'Invalid domain parameter' },
        { status: 400 }
      );
    }

    const result = await performWhoisQuery(domain, options);
    
    return NextResponse.json({
      success: true,
      data: result,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    return NextResponse.json(
      { 
        success: false,
        error: 'Query failed',
        details: error instanceof Error ? error.message : 'Unknown error'
      },
      { status: 500 }
    );
  }
}
```

### 动态路由 API

```typescript
// app/api/domain/[slug]/route.ts
export async function GET(
  request: NextRequest,
  { params }: { params: { slug: string } }
) {
  const domain = params.slug;
  
  try {
    const domainInfo = await getDomainInfo(domain);
    return NextResponse.json({ data: domainInfo });
  } catch (error) {
    return NextResponse.json(
      { error: 'Domain not found' },
      { status: 404 }
    );
  }
}
```

## 客户端 API 调用模式

### API 请求封装

```typescript
// src/lib/api.ts
interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: string;
  details?: string;
}

class ApiClient {
  private baseUrl: string;

  constructor(baseUrl: string = '') {
    this.baseUrl = baseUrl;
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<ApiResponse<T>> {
    try {
      const response = await fetch(`${this.baseUrl}${endpoint}`, {
        headers: {
          'Content-Type': 'application/json',
          ...options.headers,
        },
        ...options,
      });

      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      return await response.json();
    } catch (error) {
      return {
        success: false,
        error: 'Network error',
        details: error instanceof Error ? error.message : 'Unknown error',
      };
    }
  }

  async get<T>(endpoint: string): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { method: 'GET' });
  }

  async post<T>(endpoint: string, data: any): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, {
      method: 'POST',
      body: JSON.stringify(data),
    });
  }

  async put<T>(endpoint: string, data: any): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, {
      method: 'PUT',
      body: JSON.stringify(data),
    });
  }

  async delete<T>(endpoint: string): Promise<ApiResponse<T>> {
    return this.request<T>(endpoint, { method: 'DELETE' });
  }
}

export const apiClient = new ApiClient('/api');
```

### 具体 API 服务

```typescript
// src/lib/services/whois.ts
import { apiClient } from '@/lib/api';

export interface WhoisData {
  domain: string;
  registrar: string;
  creationDate: string;
  expirationDate: string;
  nameServers: string[];
  status: string[];
}

export class WhoisService {
  static async queryDomain(domain: string): Promise<WhoisData | null> {
    const response = await apiClient.post<WhoisData>('/whois', { domain });
    
    if (response.success && response.data) {
      return response.data;
    } else {
      console.error('WHOIS query failed:', response.error);
      return null;
    }
  }

  static async getDomainHistory(domain: string): Promise<any[]> {
    const response = await apiClient.get<any[]>(`/whois/history?domain=${domain}`);
    return response.success ? response.data || [] : [];
  }
}
```

### DNS 查询服务

```typescript
// src/lib/services/dns.ts
export interface DnsRecord {
  type: string;
  name: string;
  value: string;
  ttl: number;
}

export class DnsService {
  static async queryDns(domain: string, recordType?: string): Promise<DnsRecord[]> {
    const params = new URLSearchParams({ domain });
    if (recordType) params.append('type', recordType);

    const response = await apiClient.get<DnsRecord[]>(`/dns?${params}`);
    return response.success ? response.data || [] : [];
  }

  static async getAllRecords(domain: string): Promise<Record<string, DnsRecord[]>> {
    const response = await apiClient.get<Record<string, DnsRecord[]>>(`/dns/all?domain=${domain}`);
    return response.success ? response.data || {} : {};
  }
}
```

## 错误处理模式

### 统一错误处理

```typescript
// src/lib/error-handler.ts
export class ApiError extends Error {
  constructor(
    message: string,
    public status: number,
    public code?: string
  ) {
    super(message);
    this.name = 'ApiError';
  }
}

export function handleApiError(error: unknown): ApiError {
  if (error instanceof ApiError) {
    return error;
  }

  if (error instanceof Error) {
    return new ApiError(error.message, 500, 'INTERNAL_ERROR');
  }

  return new ApiError('Unknown error occurred', 500, 'UNKNOWN_ERROR');
}

// 在 API 路由中使用
export async function GET(request: NextRequest) {
  try {
    // API 逻辑
  } catch (error) {
    const apiError = handleApiError(error);
    return NextResponse.json(
      { 
        error: apiError.message,
        code: apiError.code 
      },
      { status: apiError.status }
    );
  }
}
```

### 客户端错误处理

```typescript
// src/hooks/useApiQuery.ts
import { useState, useEffect } from 'react';

interface UseApiQueryResult<T> {
  data: T | null;
  loading: boolean;
  error: string | null;
  refetch: () => Promise<void>;
}

export function useApiQuery<T>(
  fetcher: () => Promise<T>,
  deps: any[] = []
): UseApiQueryResult<T> {
  const [data, setData] = useState<T | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  const fetchData = async () => {
    try {
      setLoading(true);
      setError(null);
      const result = await fetcher();
      setData(result);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'Unknown error');
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, deps);

  return { data, loading, error, refetch: fetchData };
}
```

## 缓存策略

### 服务端缓存

```typescript
// app/api/whois/route.ts
import { unstable_cache } from 'next/cache';

const getCachedWhoisData = unstable_cache(
  async (domain: string) => {
    return await fetchWhoisData(domain);
  },
  ['whois'],
  {
    revalidate: 3600, // 1 hour cache
    tags: ['whois'],
  }
);

export async function GET(request: NextRequest) {
  const domain = request.nextUrl.searchParams.get('domain');
  
  if (!domain) {
    return NextResponse.json({ error: 'Domain required' }, { status: 400 });
  }

  try {
    const data = await getCachedWhoisData(domain);
    return NextResponse.json({ data });
  } catch (error) {
    return NextResponse.json({ error: 'Query failed' }, { status: 500 });
  }
}
```

### 客户端缓存

```typescript
// src/lib/cache.ts
class ClientCache {
  private cache = new Map<string, { data: any; timestamp: number; ttl: number }>();

  set(key: string, data: any, ttl: number = 300000) { // 5 minutes default
    this.cache.set(key, {
      data,
      timestamp: Date.now(),
      ttl,
    });
  }

  get(key: string): any | null {
    const item = this.cache.get(key);
    if (!item) return null;

    if (Date.now() - item.timestamp > item.ttl) {
      this.cache.delete(key);
      return null;
    }

    return item.data;
  }

  clear() {
    this.cache.clear();
  }
}

export const clientCache = new ClientCache();
```

## 验证和安全

### 输入验证

```typescript
// src/lib/validation.ts
export function validateDomain(domain: string): boolean {
  const domainRegex = /^[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\.[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9])*$/;
  return domainRegex.test(domain) && domain.length <= 253;
}

export function sanitizeInput(input: string): string {
  return input.trim().toLowerCase();
}

// 在 API 路由中使用
export async function POST(request: NextRequest) {
  const { domain } = await request.json();

  if (!domain || !validateDomain(domain)) {
    return NextResponse.json(
      { error: 'Invalid domain format' },
      { status: 400 }
    );
  }

  const cleanDomain = sanitizeInput(domain);
  // 继续处理...
}
```
