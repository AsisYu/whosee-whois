---
description: 
globs: 
alwaysApply: false
---
# Whosee.me 项目开发指南

## 项目概述

Whosee.me 是一个优雅的域名查询工具，基于 SvelteKit 和 TypeScript 构建，提供 WHOIS 信息查询、DNS 记录查询和网站截图功能。这是前端项目，后端服务位于独立的 [whosee-server](mdc:https:/github.com/AsisYu/whosee-server) 仓库。

## 核心技术栈

- **前端框架**: SvelteKit + Svelte 5
- **语言**: TypeScript
- **UI组件**: TailwindCSS v4
- **样式**: TailwindCSS 4.x
- **构建工具**: Vite
- **截图服务**: 后端API集成
- **包管理**: npm

## 项目架构

### 目录结构

主要的源代码位于 `src/` 目录：

```
src/
├── lib/                    # 共享库文件
│   ├── api/               # API 接口层
│   │   ├── auth.ts        # 认证相关 API
│   │   ├── dns.ts         # DNS 查询 API
│   │   ├── health.ts      # 健康检查 API
│   │   ├── screenshot.ts  # 截图功能 API
│   │   └── whois.ts       # WHOIS 查询 API
│   ├── components/        # 可复用组件
│   │   ├── common/        # 通用组件
│   │   ├── domain/        # 域名相关组件
│   │   └── screenshot/    # 截图相关组件
│   ├── stores/           # 状态管理
│   └── config/           # 配置管理
└── routes/               # 页面路由
    ├── api/              # API 路由
    └── health/           # 页面路由
```

### 关键文件

- **主页**: [src/routes/+page.svelte](mdc:src/routes/+page.svelte) - 应用主入口
- **API 配置**: [src/lib/config/index.ts](mdc:src/lib/config/index.ts) - API 端点配置
- **认证模块**: [src/lib/api/auth.ts](mdc:src/lib/api/auth.ts) - JWT 认证处理
- **状态管理**: [src/lib/stores/](mdc:src/lib/stores) - Svelte stores
- **组件库**: [src/lib/components/](mdc:src/lib/components) - 可复用组件

## 开发模式和约定

### API 服务模式

1. **认证**: 使用 JWT token 进行 API 认证
2. **缓存**: 所有 API 响应支持缓存机制
3. **错误处理**: 统一的错误处理和用户提示
4. **懒加载**: 组件和数据按需加载

### 状态管理模式

使用 Svelte stores 进行状态管理：

```typescript
// stores 模式示例
const store = writable<DataType | null>(null);
return {
  subscribe,
  search: async (query: string) => {
    set({ loading: true });
    const data = await apiCall(query);
    set({ ...data, loading: false });
  },
  reset: () => set(null)
};
```

### 组件组织

- **页面组件**: 放在 `routes/` 目录
- **可复用组件**: 放在 `lib/components/` 目录
- **业务组件**: 按功能分组（domain、screenshot 等）
- **通用组件**: 放在 `common/` 子目录

### API 调用模式

1. 所有 API 调用都通过 `lib/api/` 模块
2. 使用 `authenticatedFetch` 进行认证请求
3. 统一的错误处理和响应格式化
4. 支持缓存状态检查

## 环境配置

主要环境变量（在 `.env` 文件中配置）：

```bash
VITE_API_PROTOCOL=http
VITE_API_HOST=localhost
VITE_API_PORT=3900
VITE_API_TOKEN=xxx
VITE_CACHE_ENABLED=true
VITE_CACHE_TTL=1800000
VITE_DEBUG_MODE=false
```

## 开发命令

```bash
npm run dev          # 启动开发服务器
npm run build        # 构建生产版本
npm run preview      # 预览生产构建
npm run check        # 类型检查
npm run check:watch  # 监视类型检查
```

## 代码风格约定

1. **TypeScript**: 所有 `.ts` 和 `.svelte` 文件使用 TypeScript
2. **接口定义**: API 响应和组件 props 都要定义 interface
3. **错误处理**: 使用 try-catch 和统一的错误提示
4. **中文注释**: 重要功能使用中文注释说明
5. **响应式设计**: 所有组件支持移动端和桌面端

## API 集成指南

### WHOIS 查询

```typescript
import { queryWhois } from '$lib/api';
const result = await queryWhois(domain);
```

### DNS 查询

```typescript
import { queryDNS } from '$lib/api';
const records = await queryDNS(domain);
```

### 截图功能

```typescript
import { takeScreenshot } from '$lib/api';
const screenshot = await takeScreenshot(domain, type);
```

## 部署配置

项目配置为部署到 Vercel，相关配置：
- [vercel.json](mdc:vercel.json) - Vercel 部署配置
- [package.json](mdc:package.json) - 依赖和脚本配置





